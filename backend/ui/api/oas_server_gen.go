// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// CompleteUserRegistration implements CompleteUserRegistration operation.
	//
	// Complete user registration.
	//
	// POST /complete-registration
	CompleteUserRegistration(ctx context.Context, req *CompleteUserRegistrationReq) (CompleteUserRegistrationRes, error)
	// GetAllUsers implements GetAllUsers operation.
	//
	// Get all users.
	//
	// GET /users
	GetAllUsers(ctx context.Context) ([]User, error)
	// Ping implements Ping operation.
	//
	// Check if the server is running.
	//
	// GET /ping
	Ping(ctx context.Context) (*PingOK, error)
	// SendEmailVerification implements SendEmailVerification operation.
	//
	// Send email verification.
	//
	// POST /send-verification
	SendEmailVerification(ctx context.Context, req *SendEmailVerificationReq) (SendEmailVerificationRes, error)
	// VerifyEmail implements VerifyEmail operation.
	//
	// Verify email.
	//
	// POST /verify-email
	VerifyEmail(ctx context.Context, req *VerifyEmailReq) (VerifyEmailRes, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h   Handler
	sec SecurityHandler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, sec SecurityHandler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		sec:        sec,
		baseServer: s,
	}, nil
}
