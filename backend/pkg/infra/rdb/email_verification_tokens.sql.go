// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: email_verification_tokens.sql

package rdb

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createEmailVerificationToken = `-- name: CreateEmailVerificationToken :one
insert into email_verification_tokens (token, email, expires_at, created_at) values ($1, $2, $3, $4) returning token, email, expires_at, created_at
`

type CreateEmailVerificationTokenParams struct {
	Token     pgtype.UUID
	Email     string
	ExpiresAt pgtype.Timestamptz
	CreatedAt pgtype.Timestamptz
}

func (q *Queries) CreateEmailVerificationToken(ctx context.Context, arg CreateEmailVerificationTokenParams) (EmailVerificationToken, error) {
	row := q.db.QueryRow(ctx, createEmailVerificationToken,
		arg.Token,
		arg.Email,
		arg.ExpiresAt,
		arg.CreatedAt,
	)
	var i EmailVerificationToken
	err := row.Scan(
		&i.Token,
		&i.Email,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteEmailVerificationToken = `-- name: DeleteEmailVerificationToken :exec
delete from email_verification_tokens where token = $1
`

func (q *Queries) DeleteEmailVerificationToken(ctx context.Context, token pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteEmailVerificationToken, token)
	return err
}

const deleteEmailVerificationTokensByEmail = `-- name: DeleteEmailVerificationTokensByEmail :exec
delete from email_verification_tokens where email = $1
`

func (q *Queries) DeleteEmailVerificationTokensByEmail(ctx context.Context, email string) error {
	_, err := q.db.Exec(ctx, deleteEmailVerificationTokensByEmail, email)
	return err
}

const getEmailVerificationToken = `-- name: GetEmailVerificationToken :one
select token, email, expires_at, created_at from email_verification_tokens where token = $1
`

func (q *Queries) GetEmailVerificationToken(ctx context.Context, token pgtype.UUID) (EmailVerificationToken, error) {
	row := q.db.QueryRow(ctx, getEmailVerificationToken, token)
	var i EmailVerificationToken
	err := row.Scan(
		&i.Token,
		&i.Email,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const getEmailVerificationTokenByEmail = `-- name: GetEmailVerificationTokenByEmail :one
select token, email, expires_at, created_at from email_verification_tokens where email = $1
`

func (q *Queries) GetEmailVerificationTokenByEmail(ctx context.Context, email string) (EmailVerificationToken, error) {
	row := q.db.QueryRow(ctx, getEmailVerificationTokenByEmail, email)
	var i EmailVerificationToken
	err := row.Scan(
		&i.Token,
		&i.Email,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}
