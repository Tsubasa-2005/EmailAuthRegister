openapi: 3.0.3
info:
  title: User Registration API
  version: 1.0.0
  license:
    name: MIT
    url: https://github.com/Tsubasa-2005/EmailAuthResister
servers:
  - url: http://127.0.0.1:8080
paths:
  /ping:
    get:
      operationId: Ping
      summary: Ping the server
      description: Check if the server is running.
      responses:
        '200':
          description: Server is running
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                properties:
                  message:
                    type: string
                    default: pong
      security: []
  /send-verification:
    post:
      summary: Send email verification
      operationId: SendEmailVerification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
      responses:
        '200':
          description: Email sent successfully
        '400':
          $ref: '#/components/responses/badRequest'
        '500':
          $ref: '#/components/responses/internalServerError'
      security: []
  /verify-email:
    post:
      summary: Verify email
      operationId: VerifyEmail
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
              properties:
                token:
                  type: string
                  format: uuid
      responses:
        '200':
          description: Email verified
          content:
            application/json:
              schema:
                type: object
                required:
                  - email
                properties:
                  email:
                    type: string
        '401':
          $ref: '#/components/responses/unauthorized'
      security: []
  /complete-registration:
    post:
      summary: Complete user registration
      operationId: CompleteUserRegistration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
                - email
                - name
                - password
              properties:
                token:
                  type: string
                  format: uuid
                email:
                  type: string
                name:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                required:
                  - token
                properties:
                  token:
                    type: string
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
      security: []
  /users:
    get:
      summary: Get all users
      operationId: GetAllUsers
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/user'
      security:
        - BearerAuth: []
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    badRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            type: object
            required:
              - message
            properties:
              message:
                type: string
    internalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            type: object
            required:
              - message
            properties:
              message:
                type: string
    unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            required:
              - message
            properties:
              message:
                type: string
  schemas:
    user:
      type: object
      required:
        - id
        - email
        - password
        - name
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the user.
          example: 1
        email:
          type: string
          format: email
          description: Email address of the user.
          example: user@example.com
        password:
          type: string
          format: password
          description: Encrypted password of the user.
        name:
          type: string
          description: Full name of the user.
          example: John Doe
        created_at:
          type: string
          format: date-time
          description: User creation timestamp
        updated_at:
          type: string
          format: date-time
          description: Last profile update timestamp
        deleted_at:
          type: string
          format: date-time
          description: Soft-delete timestamp if the user is removed
